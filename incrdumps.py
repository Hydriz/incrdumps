#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright (C) 2012 Hydriz
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import getopt
import os
import re
import sys
import time
import urllib

import converter
import settings

# Settings are all at settings.py, thanks!
# Global configuration
userdate = sys.argv[1]
filelist = {
	'-md5sums.txt',
	'-pages-meta-hist-incr.xml.bz2',
	'-stubs-meta-hist-incr.xml.gz',
	'maxrevid.txt',
	'status.txt',
}
wikilist = ""
count = 0
start = ""
langname = ""
sitename = ""

# Clone the settings in settings.py
tempdir = settings.tempdir
accesskey = settings.accesskey
secretkey = settings.secretkey
hosturl = settings.hosturl
rsynchost = settings.rsynchost
collection = settings.collection
mediatype = settings.mediatype
sizehint = settings.sizehint

def welcome():
	print "Welcome to the incremental dumps archiving script!"

def bye():
	print "Done uploading!"

def grablistofwikis():
	global wikilist
	directory = urllib.urlopen(hosturl)
	raw = directory.read()
	directory.close()
	wikis = re.compile(r'<strong>(?P<wiki>[^>]+)</strong>').finditer(raw)
	wikilisting = []
	for wiki in wikis:
		wikilisting.append([wiki.group('wiki')])
	wikilist = wikilisting

def foreachwiki():
	global count, langname, sitename
	for thewiki in wikilist:
		curwiki = ''.join(thewiki)
		x = converter.ASConverter()
		if (curwiki == "Here's the big fat disclaimer."): # The only non-wiki string that is in bold
			continue
		else:
			downloaddump(curwiki)
			x.convertdb(curwiki)
			lang = x.langname
			if (lang == ""):
				langname = curwiki
			else:
				langname = 'the %s ' % (lang)
			sitename = x.site
			upload(curwiki)
			rmdir(curwiki)
			count = 0 # Bringing it back down to 0 once its done uploading for the current wiki

def downloaddump(wiki):
	global rsynchost, tempdir
	os.system('rsync -av ' + rsynchost + '/' + wiki + '/' + userdate + ' ' + tempdir + '/' + wiki)

def upload(wiki):
	global count, filelist, tempdir, userdate, langname, sitename
	os.chdir(tempdir + '/' + wiki + '/' + userdate)
	for thefile in filelist:
		curfile = ''.join(thefile)
		if (curfile.startswith('-')):
			thedumpfile = wiki + '-' + userdate + curfile
		else:
			thedumpfile = curfile
		time.sleep(1) # Ctrl-C
		if (count == 0):
			curl = ['curl', '--retry 3', '--location',
					'--header', "'x-amz-auto-make-bucket:1'",
					'--header', "'x-archive-meta01-collection:%s'" % (collection),
					'--header', "'x-archive-meta-mediatype:%s'" % (mediatype),
					'--header', "'x-archive-queue-derive:0'",
					'--header', "'x-archive-size-hint:%s'" % (sizehint),
					'--header', "'x-archive-meta-title:Wikimedia incremental dump files for %s%s on %s'" % (langname, sitename, userdate),
					'--header', "'x-archive-meta-description:This is the incremental dump files for %s%s that is generated by Wikimedia on %s.'" % (langname, sitename, userdate),
					'--header', '"authorization: LOW %s:%s"' % (accesskey,secretkey),
					'--upload-file', "%s http://s3.us.archive.org/incr-%s-%s/%s" % (thedumpfile,wiki,userdate,thedumpfile),
					]
			os.system(' '.join(curl))
			time.sleep(60)
			count += 1
		else:
			curl = ['curl', '--retry 3', '--location',
					'--header', "'x-archive-queue-derive:0'",
					'--header', '"authorization: LOW %s:%s"' % (accesskey,secretkey),
					'--upload-file', "%s http://s3.us.archive.org/incr-%s-%s/%s" % (thedumpfile,wiki,userdate,thedumpfile),
					]
			os.system(' '.join(curl))

def rmdir(wiki):
	global tempdir
	os.chdir(tempdir)
	os.system('rm -rf ' + wiki)

def processopts(params=[]):
	global start
	if not params:
		params = sys.argv[1:]
	try:
		opts, args = getopt.getopt(params, "", ["start", ])
	except getopt.GetoptError, err:
		# print help information and exit:
		print str(err) # will print something like "option -a not recognized"
		sys.exit(2)
	for o, a in opts:
		if o in ("--start"):
			start = a
        else:
            assert False, "unhandled option"

def process():
	welcome()
	grablistofwikis()
	foreachwiki()
	bye()

process()
